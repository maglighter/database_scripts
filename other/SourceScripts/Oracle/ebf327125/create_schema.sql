CREATE TABLE EBF_NUMBERTYPES
(
  S_NUMBER                  NUMBER(38,10),
  S_INTEGER                 INTEGER,
  S_BINARY_DOUBLE           BINARY_DOUBLE,
  S_BINARY_FLOAT            BINARY_FLOAT,
  S_DECIMAL                 NUMBER(30,8),
  S_DOUBLE_PRECISION_FLOAT  FLOAT(126),
  S_PK_FORMAPPING           INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EBF_CHARTYPES
(
  S_VARCHAR2       VARCHAR2(200 BYTE),
  S_CHAR           CHAR(200 BYTE),
  S_NVARCHAR2      NVARCHAR2(500),
  S_NCHAR          NCHAR(500),
  S_PK_FORMAPPING  INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EBF_DATATYPES
(
  S_DATE                     DATE,
  S_TIMESTAMP_WITOUT_TZ      TIMESTAMP(6),
  S_TIMESTAMP_WITH_TZ        TIMESTAMP(6) WITH TIME ZONE,
  S_TIMESTAMP_WITH_LOCAL_TZ  TIMESTAMP(6) WITH LOCAL TIME ZONE,
  S_PK_FORMAPPING            INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EBF_RAWLOBTYPES
(
  S_RAW            RAW(2000),
  S_BLOB           BLOB,
  S_BLOB_NAME      VARCHAR2(2000 BYTE),
  S_CLOB           CLOB,
  S_NCLOB          NCLOB,
  S_PK_FORMAPPING  INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
lob (S_BLOB,S_CLOB,S_NLOB) store as
(tablespace USERS
storage (initial 100K next 100K pctincrease 0)
chunk 16K pctversion 10 nocache logging);

ALTER TABLE EBF_NUMBERTYPES ADD (
  CONSTRAINT EBF_NUMBERTYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING));

ALTER TABLE EBF_DATATYPES ADD (
  CONSTRAINT EBF_DATATYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING));

ALTER TABLE EBF_RAWLOBTYPES ADD (
  CONSTRAINT EBF_RAWLOBTYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING));

ALTER TABLE EBF_CHARTYPES ADD (
  CONSTRAINT EBF_CHARTYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING));
 
 
CREATE OR REPLACE TRIGGER EBF_PK_TRG_NUMBERTYPES
BEFORE INSERT
ON EBF_NUMBERTYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT EBF_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END EBF_PK_TRG_NUMBERTYPES;
/
show errors


CREATE OR REPLACE TRIGGER EBF_PK_TRG_RAWLOBTYPES
BEFORE INSERT
ON EBF_RAWLOBTYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT EBF_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END EBF_PK_TRG_RAWLOBTYPES;
/
show errors


CREATE OR REPLACE TRIGGER EBF_PK_TRG_CHARTYPES
BEFORE INSERT
ON EBF_CHARTYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT EBF_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END EBF_PK_TRG_CHARTYPES;
/
show errors


CREATE OR REPLACE TRIGGER EBF_PK_TRG_DATATYPES
BEFORE INSERT
ON EBF_DATATYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT EBF_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END EBF_PK_TRG_DATATYPES;


