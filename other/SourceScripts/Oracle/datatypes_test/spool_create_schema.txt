SQL> CREATE SEQUENCE ORA_PK_ID
  START WITH 1
  MAXVALUE 9999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER
Sequence created.
SQL> CREATE TABLE ORA_NUMBERTYPES
(
  S_NUMBER                  NUMBER(38,10),
  S_INTEGER                 INTEGER,
  S_BINARY_DOUBLE           BINARY_DOUBLE,
  S_BINARY_FLOAT            BINARY_FLOAT,
  S_DECIMAL                 NUMBER(30,8),
  S_DOUBLE_PRECISION_FLOAT  FLOAT(126),
  S_PK_FORMAPPING           INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> CREATE TABLE ORA_CHARTYPES
(
  S_VARCHAR2       VARCHAR2(200 BYTE),
  S_CHAR           CHAR(200 BYTE),
  S_NVARCHAR2      NVARCHAR2(500),
  S_NCHAR          NCHAR(500),
  S_PK_FORMAPPING  INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> CREATE TABLE ORA_DATATYPES
(
  S_DATE                     DATE,
  S_TIMESTAMP_WITOUT_TZ      TIMESTAMP(6),
  S_TIMESTAMP_WITH_TZ        TIMESTAMP(6) WITH TIME ZONE,
  S_TIMESTAMP_WITH_LOCAL_TZ  TIMESTAMP(6) WITH LOCAL TIME ZONE,
--  S_INTERVAL_DAY_SECOND      INTERVAL DAY(2) TO SECOND(6),
--  S_INTERVAL_YEAR_MONTH      INTERVAL YEAR(2) TO MONTH,
  S_PK_FORMAPPING            INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> CREATE TABLE ORA_RAWLOBTYPES
(
--  S_LONG           LONG,
  S_RAW            RAW(2000),
--  S_LONG_RAW       LONG RAW,
  S_BLOB           BLOB,
  S_BLOB_NAME      VARCHAR2(2000 BYTE),
  S_CLOB           CLOB,
  S_NCLOB          NCLOB,
  S_PK_FORMAPPING  INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
Table created.
SQL> ALTER TABLE ORA_NUMBERTYPES ADD (
  CONSTRAINT ORA_NUMBERTYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING))
Table altered.
SQL> ALTER TABLE ORA_DATATYPES ADD (
  CONSTRAINT ORA_DATATYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING))
Table altered.
SQL> ALTER TABLE ORA_RAWLOBTYPES ADD (
  CONSTRAINT ORA_RAWLOBTYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING))
Table altered.
SQL> ALTER TABLE ORA_CHARTYPES ADD (
  CONSTRAINT ORA_CHARTYPES_PK
 PRIMARY KEY
 (S_PK_FORMAPPING))
Table altered.
SQL> CREATE OR REPLACE TRIGGER ORA_PK_TRG_NUMBERTYPES
BEFORE INSERT
ON ORA_NUMBERTYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT ORA_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ORA_PK_TRG_NUMBERTYPES;
Trigger created.
SQL> show errors
No errors.
SQL> CREATE OR REPLACE TRIGGER ORA_PK_TRG_RAWLOBTYPES
BEFORE INSERT
ON ORA_RAWLOBTYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT ORA_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ORA_PK_TRG_RAWLOBTYPES;
Trigger created.
SQL> show errors
No errors.
SQL> CREATE OR REPLACE TRIGGER ORA_PK_TRG_CHARTYPES
BEFORE INSERT
ON ORA_CHARTYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT ORA_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ORA_PK_TRG_CHARTYPES;
Trigger created.
SQL> show errors
No errors.
SQL> CREATE OR REPLACE TRIGGER ORA_PK_TRG_DATATYPES
BEFORE INSERT
ON ORA_DATATYPES 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
   tmpVar := 0;

    IF :NEW.S_PK_FORMAPPING IS NULL 
    THEN  
        SELECT ORA_PK_ID.NEXTVAL INTO tmpVar FROM dual;
        :NEW.S_PK_FORMAPPING:= tmpVar;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END ORA_PK_TRG_DATATYPES;
Trigger created.
SQL> show errors
No errors.
SQL> spool off
